# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xfUe6j_GZkzIgbJ7XwRadOoNJGkfebSW
"""

!pip install streamlit -q
!pip install pyngrok -q
!pip install streamlit-chat -q

import json
import random
import streamlit as st
from streamlit_chat import message
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')

# Load intents.json
with open('/content/mentalhealthintents.json') as file:
    intents = json.load(file)

# Preprocess data
stop_words = set(stopwords.words('english'))
def preprocess(text):
    tokens = word_tokenize(text.lower())
    tokens = [word for word in tokens if word.isalnum() and word not in stop_words]
    return ' '.join(tokens)

vectorizer = CountVectorizer()
patterns = []
tags = []
responses = {}

for intent in intents['intents']:
    responses[intent['tag']] = intent['responses']
    for pattern in intent['patterns']:
        patterns.append(preprocess(pattern))
        tags.append(intent['tag'])

X = vectorizer.fit_transform(patterns)

# Function to predict intent
def predict_intent(user_input):
    processed_input = preprocess(user_input)
    input_vector = vectorizer.transform([processed_input])
    similarities = cosine_similarity(input_vector, X).flatten()
    best_match = similarities.argmax()
    if similarities[best_match] > 0.3:
        return tags[best_match]
    return 'no_match'

# Streamlit app
st.set_page_config(page_title="Intent-Based Chatbot", layout="wide")
st.title("🚀 AI Chatbot")

# About Section
with st.sidebar:
    st.title("About Us")
    st.write(
        "This chatbot is designed to provide intelligent, intent-based responses to your queries. "
        "It uses Natural Language Processing (NLP) to understand and respond effectively. "
        "Simple, interactive, and user-friendly, this chatbot is your virtual assistant."
    )

# Chat Interface
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

st.markdown("<style>.user-message {color: #0078D4;} .bot-message {color: #FF5733;} .chat-box {background-color: #F0F8FF; border-radius: 10px; padding: 10px;}</style>", unsafe_allow_html=True)

user_input = st.text_input("Ask me anything:")

if user_input:
    st.session_state.chat_history.append((user_input, "user"))
    intent = predict_intent(user_input)
    if intent == 'no_match':
        bot_response = "I'm sorry, I didn't understand that. Could you rephrase?"
    else:
        bot_response = random.choice(responses[intent])
    st.session_state.chat_history.append((bot_response, "bot"))

# Display chat
for message_text, sender in st.session_state.chat_history:
    if sender == "user":
        message(message_text, is_user=True, key=f"user-{message_text}")
    else:
        message(message_text, is_user=False, key=f"bot-{message_text}")

# Footer
st.markdown(
    "<footer style='text-align: center;'>Made with ❤️ by me</footer>", unsafe_allow_html=True
)



