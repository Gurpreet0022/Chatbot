# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xfUe6j_GZkzIgbJ7XwRadOoNJGkfebSW
"""

#!pip install streamlit -q
#!pip install pyngrok -q
#!pip install streamlit-chat -q

import json
import random
import streamlit as st
from streamlit_chat import message
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('stopwords')

# Load intents.json
with open(r"C:\Users\dell\Desktop\chatbot\Chatbot\mentalhealthintents.json") as file:
    intents = json.load(file)

# Preprocess data
stop_words = set(stopwords.words('english'))
def preprocess(text):
    tokens = word_tokenize(text.lower())
    tokens = [word for word in tokens if word.isalnum() and word not in stop_words]
    return ' '.join(tokens)

vectorizer = CountVectorizer()
patterns = []
tags = []
responses = {}

for intent in intents['intents']:
    responses[intent['tag']] = intent['responses']
    for pattern in intent['patterns']:
        patterns.append(preprocess(pattern))
        tags.append(intent['tag'])

X = vectorizer.fit_transform(patterns)

# Function to predict intent
def predict_intent(user_input):
    processed_input = preprocess(user_input)
    input_vector = vectorizer.transform([processed_input])
    similarities = cosine_similarity(input_vector, X).flatten()
    best_match = similarities.argmax()
    if similarities[best_match] > 0.3:
        return tags[best_match]
    return 'no_match'

# Streamlit app
st.set_page_config(page_title="Intent-Based Chatbot", layout="wide")
st.title(" üå∏SereniChat- Your Mental Health Companion üå∏")
st.markdown("Welcome to SereniChat! How can I help you today?")


# Chat Interface
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

st.markdown(
    """
    <style>
    .user-message {color: #0078D4; font-weight: bold; background-color: #E3F2FD; padding: 10px; border-radius: 10px; margin: 5px 0;}
    .bot-message {color: #2E7D32; font-weight: bold; background-color: #E8F5E9; padding: 10px; border-radius: 10px; margin: 5px 0;}
    .chat-box {border-radius: 10px; padding: 10px;}
    body {background-color: #F7F9FC; font-family: 'Arial', sans-serif;}
    </style>
    """, 
    unsafe_allow_html=True
)

user_input = st.text_input("Ask me anything:", placeholder="Type your message here...", help="Start typing to chat.")

if user_input:
    st.session_state.chat_history.append((user_input, "user"))
    intent = predict_intent(user_input)
    if intent == 'no_match':
        bot_response = "I'm sorry, I didn't understand that. Could you rephrase?"
    else:
        bot_response = random.choice(responses[intent])
    st.session_state.chat_history.append((bot_response, "bot"))

# Display chat
st.markdown("<div style='max-height: 500px; overflow-y: auto; background-color: #FFFFFF; padding: 10px; border-radius: 10px;'>", unsafe_allow_html=True)
for idx, (message_text, sender) in enumerate(reversed(st.session_state.chat_history)):
    if sender == "user":
        st.markdown(f"<div class='user-message'>üë§ {message_text}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='bot-message'>üíÅ‚Äç‚ôÄÔ∏è {message_text}</div>", unsafe_allow_html=True)
st.markdown("</div>", unsafe_allow_html=True)

# Scroll to the bottom of the chat history
st.markdown("<script>window.scrollTo(0, document.body.scrollHeight);</script>", unsafe_allow_html=True)

# Section to display user history sessions
st.sidebar.header("Chat History")
for idx, (message_text, sender) in enumerate(st.session_state.chat_history):
    if sender == "user":
        st.sidebar.write(f"User: {message_text}", key=f"sidebar-user-{idx}")
    else:
        st.sidebar.write(f"Bot: {message_text}", key=f"sidebar-bot-{idx}")

# About Us section with toggle arrow
if 'show_about' not in st.session_state:
    st.session_state.show_about = False

if st.sidebar.button("‚¨áÔ∏è About Us" if not st.session_state.show_about else "‚¨ÜÔ∏è About Us"):
    st.session_state.show_about = not st.session_state.show_about

if st.session_state.show_about:
    st.sidebar.header("About Us")
    st.sidebar.write("SereniChat is your 24/7 mental health companion, offering a safe and supportive space to share your feelings and find comfort. Designed to be a compassionate listener, SereniChat helps you navigate emotions with thoughtful, non-judgmental responses. While not a substitute for professional help, it's here to support your journey toward better mental well-being."
                     "It is an intent based and it is still in development. chatbot For any queries or suggestions, contact us at gurpreetwork43@gmail.com.")

# Footer
st.markdown(
    "<footer style='text-align: center;'>Made with ‚ù§Ô∏è by Gurpreet</footer>", unsafe_allow_html=True
)








